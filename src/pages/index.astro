---
import { Octokit } from '@octokit/rest'
import { Icon } from 'astro-iconify'
import '../scss/style.scss'
import { Markdown } from '@astropub/md'
const organization = 'OM-MediaWorks'
const octokit = new Octokit({
	'auth': import.meta.env.SECRET_GITHUB
})

const introduction = await  fetch(`https://raw.githubusercontent.com/${organization}/.github/main/profile/readme.md`)
	.then(response => response.text())

const response = await octokit.rest.repos
  .listForOrg({
    org: "om-mediaworks",
    type: "public",
  })

const projects = await Promise.all(response.data
	.filter(project => project.name[0] !== '.')
	.map(async project => {
		const response = await octokit.rest.issues.listForRepo({
			'owner': 'om-mediaworks',
			'repo': project.name
		})

		return Object.assign(project, { issues: response.data })
	}))
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
		<title>MediaWorks</title>
	</head>
	<body>
		<div class="container p-2 mt-4">
			<header class="site-header">
				<img src="/mediaworks-logo.png" class="logo"/>
				<div class="introduction">
					<Markdown of={introduction} />
				</div>
			</header>

			<div class="list-group">
			{projects.map(project => {
				const Element = project.issues.length ? 'details' : 'div'

				const header = <header class="d-inline">
					<h2 class="d-inline">
						<span>{project.name}</span>
						<a target="_blank" href={project.html_url}><Icon name="akar-icons:github-fill" /></a>
						{project.homepage ? <a href={project.homepage}><Icon name="heroicons-solid:external-link" /></a> : null}
					</h2>
					<p>{project.description}</p>
					{project.topics?.length ? 
						<small class="topics d-flex gap-2">
							{project.topics?.map(topic => <span class="badge bg-secondary">{topic}</span>)}
						</small> : null}
				</header>

				return <Element class={`list-group-item project ${project.issues.length ? 'has-issues' : ''}`}>
					{project.issues.length ? <summary>{header}</summary> : header }
					{project.issues.length ? <ul class="issues pt-4">
						{project.issues.map(issue => <li><a target="_blank" href={issue.html_url}>{issue.title}</a></li>)}
					</ul>	: null}
				</Element>
			})}
		</div>
	</div>
	</body>
</html>
